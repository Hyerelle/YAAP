.content


    h2.title Installation
    hr
    p To start working with Yaap, link your Yaap with this script tag in your page :
    pre
        code &lt;script src="./yaap.min.js"&gt;&lt;/script&gt;
    p This will make 'Yaap' globally available in your page.

    h2.title Initialisation
    hr
    p In order to start tracking thing with Yaap, you need to define an API endpoint :
    pre
        code Yaap.connect('http://localhost:1337/your-api')
    p By default, the method used to send your data is <strong>GET</strong>, unless you decide otherwise (GET, POST or PIXEL)


    h2.title Basic Usage
    hr
    p To send your first data with Yaap :
        ul
            li <code>.set()</code> some properties to Yaap :
            ul
                li A property can be a <strong>string</strong>
                li A property can be a <strong>function</strong> (generated / computed on sending)
            li <code>.send()</code> those properties
    pre
        code Yaap.set('message', 'Yaap Message')
            |.set('date', () => new Date().getTime())
            |.send()

    p All properties globaly sets into Yaap will be shared (and therefore sent) with every YaapTracker & YaapEvent.

    p After the <code>.send()</code> call, you will instantly recieve a HTTP hit like this :

    pre
        code # LISTENING HTTP://LOCALHOST:1337 :
            |[GET] /your-api?message=Yaap%20Message&date=606178800000


    h2.title Yaap Trackers
    hr
    p Basically, <strong>Yaap</strong> is a YaapTracker (without the 'extends' possibility).

    p Trackers are used to hold properties, shared by a group of YaapEvent or event YaapTracker.

    p Creating a tracker, and setting data into it is as simple as :

    pre
        code // Global property
            |Yaap.set('date', () => new Date().getTime())
            | 
            |// Tracker A
            |Yaap.tracker('tracker-1').set('data', 'some-data-A')
            | 
            |// Tracker B
            |Yaap.tracker('tracker-2').set('data', 'other-data-B')
            | 
            |Yaap.send()                         // (1)
            |Yaap.tracker('tracker-1').send()    // (2)
            |Yaap.tracker('tracker-2').send()    // (3)

    p The <code>.tracker(name)</code> method returns either :
        ul
            li A new YaapTracker, empty, extended from its creator
            li The existing tracker (and all of its properties) if the given name is already known
    
    p The result of the previous code will be :

    pre
        code # LISTENING HTTP://LOCALHOST:1337 :
            | 
            |[GET-1] /your-api?date=606178800000
            |[GET-2] /your-api?date=606178800010&data=some-data-A
            |[GET-3] /your-api?date=606178800020&data=other-data-B


    h2.title Yaap Events
    hr
    
    p YaapEvents works like YaapTrackers; they hold a set a properties.

    p The big plus of YaapEvent is the <i>DOM-related</i> features :
        ul
            li You can listen for <i>DOM-Event</i> on a particular <i>DOM-Element</i> :
            ul
                li Yaap will send the data when the DOM-Event is fired

            li YaapEvent properties have acces to the triggered <i>DOM-Element</i> and <i>DOM-Event</i>
            ul
                li You can easily feed your properties with <i>DOM-related</i> informations !
        
    p That being said, you now know how you can send data based on your user-interaction on your page !

    p Let's do some basic tracking :
    blockquote When a user click on a button, I want to receive a hit with the text contained in the button

    pre
        code Yaap.tracker('interaction')
            |   .set('time-loaded', new Date().getTime())           // Date of page load
            |   .set('time-triggered', () => new Date().getTime())  // Date of event sending
            | 
            |Yaap.tracker('interaction').event('btn-click')
            |    .set('action', 'click')
            |    .set('text', (elt) => elt.txt())
            |    .domElement('.button--watched')
            |    .init()

    p The default trigger for YaapEvent is <strong>click</strong> :
    ul
        li You can use any kind of <i>DOM-Event-Listener</i> (change, focus, blur, onload ...) by setting it with <code>.trigger(method)</code>
        li You can still force a send with <code>.send()</code> method)
    p You <strong>have to</strong> call the <code>init()</code> function after all <i>DOM-related</i> configuration
